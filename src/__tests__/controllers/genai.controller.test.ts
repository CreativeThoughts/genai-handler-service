import { Request, Response } from "express"; import { generateResponse } from "../../controllers/genai.controller"; import * as genaiService from "../../services/genai.service"; jest.mock("../../services/genai.service"); describe("GenAI Controller", () => { let mockRequest: Partial<Request>; let mockResponse: Partial<Response>; beforeEach(() => { mockRequest = { body: { prompt: "test prompt" } }; mockResponse = { status: jest.fn().mockReturnThis(), json: jest.fn() }; jest.spyOn(genaiService, "generateAIResponse").mockResolvedValue("test response"); }); afterEach(() => { jest.clearAllMocks(); }); it("should return 400 if prompt is missing", async () => { mockRequest.body = {}; await generateResponse(mockRequest as Request, mockResponse as Response); expect(mockResponse.status).toHaveBeenCalledWith(400); expect(mockResponse.json).toHaveBeenCalledWith({ error: "Prompt is required" }); }); it("should return generated response successfully", async () => { await generateResponse(mockRequest as Request, mockResponse as Response); expect(genaiService.generateAIResponse).toHaveBeenCalledWith("test prompt"); expect(mockResponse.json).toHaveBeenCalledWith({ response: "test response" }); }); it("should return 500 if service throws an error", async () => { jest.spyOn(genaiService, "generateAIResponse").mockRejectedValue(new Error("Service error")); await generateResponse(mockRequest as Request, mockResponse as Response); expect(mockResponse.status).toHaveBeenCalledWith(500); expect(mockResponse.json).toHaveBeenCalledWith({ error: "Failed to generate response" }); }); });
